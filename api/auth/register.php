<?php
// /api/auth/register.php

require_once __DIR__ . '/../config/core.php';
require_once __DIR__ . '/../config/database.php';
require_once __DIR__ . '/../objects/user.php';
require_once __DIR__ . '/../objects/client.php'; // Assuming client creation is still needed

$database = new Database();
$db = $database->getConnection();

$user = new User($db);
$client = new Client($db); // Assuming client creation is still needed

$data = json_decode(file_get_contents("php://input"));

// --- NEW SERVER-SIDE VALIDATION ---

// Basic required fields check
if (empty($data->first_name) || empty($data->last_name) || empty($data->email) || empty($data->password)) {
    http_response_code(400);
    echo json_encode(["message" => "Incomplete data. First name, last name, email, and password are required."]);
    exit();
}

// Trim whitespace from inputs
$first_name = trim($data->first_name);
$last_name = trim($data->last_name);
$email = trim($data->email);
$password = $data->password; // Keep password as is for strength check

// Validate First Name Length
if (mb_strlen($first_name) <= 1) { // mb_strlen for multi-byte character support
    http_response_code(400);
    echo json_encode(["message" => "First name must be more than one character."]);
    exit();
}

// Validate Last Name Length
if (mb_strlen($last_name) <= 1) {
    http_response_code(400);
    echo json_encode(["message" => "Last name must be more than one character."]);
    exit();
}

// Validate Last Name (no numbers allowed)
if (preg_match('/[0-9]/', $last_name)) {
    http_response_code(400);
    echo json_encode(["message" => "Last name cannot contain numbers."]);
    exit();
}

// Validate Email Format (Stricter)
// 1. Use filter_var for general format and edge cases
// 2. Use regex for stricter domain/TLD check (e.g., at least 2 chars in TLD)
$email_regex = '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/';
if (!filter_var($email, FILTER_VALIDATE_EMAIL) || !preg_match($email_regex, $email)) {
    http_response_code(400);
    echo json_encode(["message" => "Please provide a valid email address."]);
    exit();
}

// Validate Password Strength ( reusing logic from ResetPasswordPage )
$password_errors = [];
if (strlen($password) < 8) {
    $password_errors[] = "Password must be at least 8 characters long.";
}
if (!preg_match('/[A-Z]/', $password)) {
    $password_errors[] = "Must contain one uppercase letter.";
}
if (!preg_match('/[a-z]/', $password)) {
    $password_errors[] = "Must contain one lowercase letter.";
}
// Check for number OR special character
if (!preg_match('/[0-9]/', $password) && !preg_match('/[^A-Za-z0-9]/', $password)) {
     $password_errors[] = "Must contain one number or special character.";
}

if (!empty($password_errors)) {
    http_response_code(400);
    // Join errors for a comprehensive message, matching frontend
    echo json_encode(["message" => implode(" ", $password_errors)]);
    exit();
}

// --- END NEW VALIDATION ---


try {
    $user->email = $email; // Use validated email
    if ($user->emailExists()) {
        http_response_code(409); // Conflict
        echo json_encode(["message" => "This email address is already registered."]);
        exit();
    }

    // Begin database transaction
    $db->beginTransaction();

    // Assign validated properties to user object
    $user->first_name = $first_name;
    $user->last_name = $last_name;
    $user->password = $password; // Use original password for hashing in create()
    $user->role = 'client'; // Default role

    // Create the user
    if (!$user->create()) {
        // Rollback and throw error if user creation fails
        throw new Exception("Unable to create user in the database.");
    }

    // Assuming a 'client' record is still needed for every 'client' user
    $client->user_id = $user->id; // Get the ID generated by user->create()
    $client->name = $user->first_name . ' ' . $user->last_name;
    $client->email = $user->email;
    // Add address and phone if they are being sent and client object supports them
    $client->address = $data->address ?? null; // Use null coalescing
    $client->phone_number = $data->phone_number ?? null; // Use null coalescing

    if (!$client->create()) {
        // Rollback and throw error if client creation fails
        throw new Exception("Unable to create client profile in the database.");
    }

    // If both succeed, commit the transaction
    $db->commit();

    // Send success response
    http_response_code(201); // Created
    echo json_encode(["message" => "User was successfully created."]);

} catch (Exception $e) {
    // If anything fails, roll back the transaction
    if ($db->inTransaction()) {
        $db->rollBack();
    }
    // Log the detailed error for server admin
    error_log("Registration Error: " . $e->getMessage());

    // Send generic server error response
    http_response_code(503); // Service Unavailable (or 500 Internal Server Error)
    echo json_encode([
        "message" => "Registration failed due to a server error. Please try again later.",
        "error" => $e->getMessage() // Keep sending detailed error for easier debugging (remove in production)
    ]);
}
?>

